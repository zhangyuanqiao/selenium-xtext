/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBrowserKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBrowserNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBrowserNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cBrowserNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOrdersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cOrdersAlternatives_6_0 = (Alternatives)cOrdersAssignment_6.eContents().get(0);
		private final RuleCall cOrdersActionParserRuleCall_6_0_0 = (RuleCall)cOrdersAlternatives_6_0.eContents().get(0);
		private final RuleCall cOrdersStructureParserRuleCall_6_0_1 = (RuleCall)cOrdersAlternatives_6_0.eContents().get(1);
		
		////GROUP TYPES
		//Main:
		//	'File' fileName=STRING 'with' 'browser' browserName=STRING ':'
		//	orders+=(Action | Structure)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'File' fileName=STRING 'with' 'browser' browserName=STRING ':' orders+=(Action | Structure)*
		public Group getGroup() { return cGroup; }
		
		//'File'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_1_0() { return cFileNameSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'browser'
		public Keyword getBrowserKeyword_3() { return cBrowserKeyword_3; }
		
		//browserName=STRING
		public Assignment getBrowserNameAssignment_4() { return cBrowserNameAssignment_4; }
		
		//STRING
		public RuleCall getBrowserNameSTRINGTerminalRuleCall_4_0() { return cBrowserNameSTRINGTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//orders+=(Action | Structure)*
		public Assignment getOrdersAssignment_6() { return cOrdersAssignment_6; }
		
		//(Action | Structure)
		public Alternatives getOrdersAlternatives_6_0() { return cOrdersAlternatives_6_0; }
		
		//Action
		public RuleCall getOrdersActionParserRuleCall_6_0_0() { return cOrdersActionParserRuleCall_6_0_0; }
		
		//Structure
		public RuleCall getOrdersStructureParserRuleCall_6_0_1() { return cOrdersStructureParserRuleCall_6_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClickParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFillParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckBoxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefreshParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cActionSelectParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStoreParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReDefineParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDeleteParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRickrollParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDoWaitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Action:
		//	Navigate | Click | Fill | CheckBox | Refresh | ActionSelect | Store | ReDefine | Delete | Rickroll | DoWait;
		@Override public ParserRule getRule() { return rule; }
		
		//Navigate | Click | Fill | CheckBox | Refresh | ActionSelect | Store | ReDefine | Delete | Rickroll | DoWait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Navigate
		public RuleCall getNavigateParserRuleCall_0() { return cNavigateParserRuleCall_0; }
		
		//Click
		public RuleCall getClickParserRuleCall_1() { return cClickParserRuleCall_1; }
		
		//Fill
		public RuleCall getFillParserRuleCall_2() { return cFillParserRuleCall_2; }
		
		//CheckBox
		public RuleCall getCheckBoxParserRuleCall_3() { return cCheckBoxParserRuleCall_3; }
		
		//Refresh
		public RuleCall getRefreshParserRuleCall_4() { return cRefreshParserRuleCall_4; }
		
		//ActionSelect
		public RuleCall getActionSelectParserRuleCall_5() { return cActionSelectParserRuleCall_5; }
		
		//Store
		public RuleCall getStoreParserRuleCall_6() { return cStoreParserRuleCall_6; }
		
		//ReDefine
		public RuleCall getReDefineParserRuleCall_7() { return cReDefineParserRuleCall_7; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_8() { return cDeleteParserRuleCall_8; }
		
		//Rickroll
		public RuleCall getRickrollParserRuleCall_9() { return cRickrollParserRuleCall_9; }
		
		//DoWait
		public RuleCall getDoWaitParserRuleCall_10() { return cDoWaitParserRuleCall_10; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Structure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoAllParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExecuteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Structure:
		//	If | Loop | DoAll | Execute;
		@Override public ParserRule getRule() { return rule; }
		
		//If | Loop | DoAll | Execute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//DoAll
		public RuleCall getDoAllParserRuleCall_2() { return cDoAllParserRuleCall_2; }
		
		//Execute
		public RuleCall getExecuteParserRuleCall_3() { return cExecuteParserRuleCall_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	IsIn | Not;
		@Override public ParserRule getRule() { return rule; }
		
		//IsIn | Not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsIn
		public RuleCall getIsInParserRuleCall_0() { return cIsInParserRuleCall_0; }
		
		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObjNameIDTerminalRuleCall_0_0 = (RuleCall)cObjNameAssignment_0.eContents().get(0);
		private final RuleCall cSubProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cHtmltypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cHtmltypeHTMLTYPEParserRuleCall_2_0_0 = (RuleCall)cHtmltypeAssignment_2_0.eContents().get(0);
		private final Assignment cObjectDefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cObjectDefSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cObjectDefAssignment_2_1.eContents().get(0);
		
		////OBJECTS
		//Object:
		//	objName=ID | SubProcedure | htmltype=HTMLTYPE objectDef=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//objName=ID | SubProcedure | htmltype=HTMLTYPE objectDef=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//objName=ID
		public Assignment getObjNameAssignment_0() { return cObjNameAssignment_0; }
		
		//ID
		public RuleCall getObjNameIDTerminalRuleCall_0_0() { return cObjNameIDTerminalRuleCall_0_0; }
		
		//SubProcedure
		public RuleCall getSubProcedureParserRuleCall_1() { return cSubProcedureParserRuleCall_1; }
		
		//htmltype=HTMLTYPE objectDef=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//htmltype=HTMLTYPE
		public Assignment getHtmltypeAssignment_2_0() { return cHtmltypeAssignment_2_0; }
		
		//HTMLTYPE
		public RuleCall getHtmltypeHTMLTYPEParserRuleCall_2_0_0() { return cHtmltypeHTMLTYPEParserRuleCall_2_0_0; }
		
		//objectDef=STRING
		public Assignment getObjectDefAssignment_2_1() { return cObjectDefAssignment_2_1; }
		
		//STRING
		public RuleCall getObjectDefSTRINGTerminalRuleCall_2_1_0() { return cObjectDefSTRINGTerminalRuleCall_2_1_0; }
	}
	public class HTMLTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HTMLTYPE");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeGuessKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeTitleKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeClassKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeIdKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeCSSSelectorKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeXPathKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		
		////URL should be added, but it would clash with guess
		////Collection should be added
		//HTMLTYPE:
		//	type=('guess' | 'title' | 'class' | 'id' | 'name' | 'CSS Selector' | 'XPath');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('guess' | 'title' | 'class' | 'id' | 'name' | 'CSS Selector' | 'XPath')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('guess' | 'title' | 'class' | 'id' | 'name' | 'CSS Selector' | 'XPath')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'guess'
		public Keyword getTypeGuessKeyword_0_0() { return cTypeGuessKeyword_0_0; }
		
		//'title'
		public Keyword getTypeTitleKeyword_0_1() { return cTypeTitleKeyword_0_1; }
		
		//'class'
		public Keyword getTypeClassKeyword_0_2() { return cTypeClassKeyword_0_2; }
		
		//'id'
		public Keyword getTypeIdKeyword_0_3() { return cTypeIdKeyword_0_3; }
		
		//'name'
		public Keyword getTypeNameKeyword_0_4() { return cTypeNameKeyword_0_4; }
		
		//'CSS Selector'
		public Keyword getTypeCSSSelectorKeyword_0_5() { return cTypeCSSSelectorKeyword_0_5; }
		
		//'XPath'
		public Keyword getTypeXPathKeyword_0_6() { return cTypeXPathKeyword_0_6; }
	}
	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Collection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cObjAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cObjObjectParserRuleCall_1_0_1_0 = (RuleCall)cObjAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOfKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAllKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cHtmltypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cHtmltypeHTMLTYPEParserRuleCall_1_1_2_0 = (RuleCall)cHtmltypeAssignment_1_1_2.eContents().get(0);
		private final Assignment cObjectRuleAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cObjectRuleSTRINGTerminalRuleCall_1_1_3_0 = (RuleCall)cObjectRuleAssignment_1_1_3.eContents().get(0);
		
		//Collection:
		//	'Collection' ('{' obj+=Object* '}' | 'of' 'all' htmltype=HTMLTYPE objectRule=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//'Collection' ('{' obj+=Object* '}' | 'of' 'all' htmltype=HTMLTYPE objectRule=STRING)
		public Group getGroup() { return cGroup; }
		
		//'Collection'
		public Keyword getCollectionKeyword_0() { return cCollectionKeyword_0; }
		
		//('{' obj+=Object* '}' | 'of' 'all' htmltype=HTMLTYPE objectRule=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'{' obj+=Object* '}'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }
		
		//obj+=Object*
		public Assignment getObjAssignment_1_0_1() { return cObjAssignment_1_0_1; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_1_0_1_0() { return cObjObjectParserRuleCall_1_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_2() { return cRightCurlyBracketKeyword_1_0_2; }
		
		//'of' 'all' htmltype=HTMLTYPE objectRule=STRING
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'of'
		public Keyword getOfKeyword_1_1_0() { return cOfKeyword_1_1_0; }
		
		//'all'
		public Keyword getAllKeyword_1_1_1() { return cAllKeyword_1_1_1; }
		
		//htmltype=HTMLTYPE
		public Assignment getHtmltypeAssignment_1_1_2() { return cHtmltypeAssignment_1_1_2; }
		
		//HTMLTYPE
		public RuleCall getHtmltypeHTMLTYPEParserRuleCall_1_1_2_0() { return cHtmltypeHTMLTYPEParserRuleCall_1_1_2_0; }
		
		//objectRule=STRING
		public Assignment getObjectRuleAssignment_1_1_3() { return cObjectRuleAssignment_1_1_3; }
		
		//STRING
		public RuleCall getObjectRuleSTRINGTerminalRuleCall_1_1_3_0() { return cObjectRuleSTRINGTerminalRuleCall_1_1_3_0; }
	}
	public class SubProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SubProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubprocedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cActionsAlternatives_2_0 = (Alternatives)cActionsAssignment_2.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_2_0_0 = (RuleCall)cActionsAlternatives_2_0.eContents().get(0);
		private final RuleCall cActionsStructureParserRuleCall_2_0_1 = (RuleCall)cActionsAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubProcedure:
		//	'Subprocedure' '{' actions+=(Action | Structure)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Subprocedure' '{' actions+=(Action | Structure)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Subprocedure'
		public Keyword getSubprocedureKeyword_0() { return cSubprocedureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions+=(Action | Structure)*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//(Action | Structure)
		public Alternatives getActionsAlternatives_2_0() { return cActionsAlternatives_2_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0_0() { return cActionsActionParserRuleCall_2_0_0; }
		
		//Structure
		public RuleCall getActionsStructureParserRuleCall_2_0_1() { return cActionsStructureParserRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RefreshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Refresh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefreshAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefreshKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////ACTIONS
		//Refresh:
		//	{Refresh} 'Refresh';
		@Override public ParserRule getRule() { return rule; }
		
		//{Refresh} 'Refresh'
		public Group getGroup() { return cGroup; }
		
		//{Refresh}
		public Action getRefreshAction_0() { return cRefreshAction_0; }
		
		//'Refresh'
		public Keyword getRefreshKeyword_1() { return cRefreshKeyword_1; }
	}
	public class NavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Navigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//Navigate:
		//	'Navigate' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Navigate' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'Navigate'
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjNameIDTerminalRuleCall_1_0 = (RuleCall)cObjNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjObjectParserRuleCall_3_0 = (RuleCall)cObjAssignment_3.eContents().get(0);
		
		////object should be added as url should be objects
		//Store:
		//	'var' objName=ID '=' obj=Object;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' objName=ID '=' obj=Object
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//objName=ID
		public Assignment getObjNameAssignment_1() { return cObjNameAssignment_1; }
		
		//ID
		public RuleCall getObjNameIDTerminalRuleCall_1_0() { return cObjNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//obj=Object
		public Assignment getObjAssignment_3() { return cObjAssignment_3; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_3_0() { return cObjObjectParserRuleCall_3_0; }
	}
	public class ReDefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReDefine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjNameIDTerminalRuleCall_1_0 = (RuleCall)cObjNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjObjectParserRuleCall_3_0 = (RuleCall)cObjAssignment_3.eContents().get(0);
		
		//ReDefine:
		//	'Redefine' objName=ID 'as' obj=Object;
		@Override public ParserRule getRule() { return rule; }
		
		//'Redefine' objName=ID 'as' obj=Object
		public Group getGroup() { return cGroup; }
		
		//'Redefine'
		public Keyword getRedefineKeyword_0() { return cRedefineKeyword_0; }
		
		//objName=ID
		public Assignment getObjNameAssignment_1() { return cObjNameAssignment_1; }
		
		//ID
		public RuleCall getObjNameIDTerminalRuleCall_1_0() { return cObjNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//obj=Object
		public Assignment getObjAssignment_3() { return cObjAssignment_3; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_3_0() { return cObjObjectParserRuleCall_3_0; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjNameIDTerminalRuleCall_1_0 = (RuleCall)cObjNameAssignment_1.eContents().get(0);
		
		//Delete:
		//	'Delete' objName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Delete' objName=ID
		public Group getGroup() { return cGroup; }
		
		//'Delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//objName=ID
		public Assignment getObjNameAssignment_1() { return cObjNameAssignment_1; }
		
		//ID
		public RuleCall getObjNameIDTerminalRuleCall_1_0() { return cObjNameIDTerminalRuleCall_1_0; }
	}
	public class ActionSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ActionSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXpathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXpathSTRINGTerminalRuleCall_3_0 = (RuleCall)cXpathAssignment_3.eContents().get(0);
		
		//ActionSelect:
		//	'Select' option=STRING 'from' xpath=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Select' option=STRING 'from' xpath=STRING
		public Group getGroup() { return cGroup; }
		
		//'Select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//option=STRING
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//STRING
		public RuleCall getOptionSTRINGTerminalRuleCall_1_0() { return cOptionSTRINGTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//xpath=STRING
		public Assignment getXpathAssignment_3() { return cXpathAssignment_3; }
		
		//STRING
		public RuleCall getXpathSTRINGTerminalRuleCall_3_0() { return cXpathSTRINGTerminalRuleCall_3_0; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		
		//Click:
		//	'Click' object=Object;
		@Override public ParserRule getRule() { return rule; }
		
		//'Click' object=Object
		public Group getGroup() { return cGroup; }
		
		//'Click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//object=Object
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_0() { return cObjectObjectParserRuleCall_1_0; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNametagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNametagSTRINGTerminalRuleCall_1_0 = (RuleCall)cNametagAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//Fill:
		//	'Fill' nametag=STRING 'with' content=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fill' nametag=STRING 'with' content=STRING
		public Group getGroup() { return cGroup; }
		
		//'Fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//nametag=STRING
		public Assignment getNametagAssignment_1() { return cNametagAssignment_1; }
		
		//STRING
		public RuleCall getNametagSTRINGTerminalRuleCall_1_0() { return cNametagSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//content=STRING
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_0() { return cContentSTRINGTerminalRuleCall_3_0; }
	}
	public class CheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNametagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNametagSTRINGTerminalRuleCall_1_0 = (RuleCall)cNametagAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNewValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cNewValueAlternatives_2_1_0 = (Alternatives)cNewValueAssignment_2_1.eContents().get(0);
		private final Keyword cNewValueTrueKeyword_2_1_0_0 = (Keyword)cNewValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cNewValueFalseKeyword_2_1_0_1 = (Keyword)cNewValueAlternatives_2_1_0.eContents().get(1);
		
		//CheckBox:
		//	'CheckBox' nametag=STRING ('to' newValue=('true' | 'false'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'CheckBox' nametag=STRING ('to' newValue=('true' | 'false'))?
		public Group getGroup() { return cGroup; }
		
		//'CheckBox'
		public Keyword getCheckBoxKeyword_0() { return cCheckBoxKeyword_0; }
		
		//nametag=STRING
		public Assignment getNametagAssignment_1() { return cNametagAssignment_1; }
		
		//STRING
		public RuleCall getNametagSTRINGTerminalRuleCall_1_0() { return cNametagSTRINGTerminalRuleCall_1_0; }
		
		//('to' newValue=('true' | 'false'))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//newValue=('true' | 'false')
		public Assignment getNewValueAssignment_2_1() { return cNewValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getNewValueAlternatives_2_1_0() { return cNewValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getNewValueTrueKeyword_2_1_0_0() { return cNewValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getNewValueFalseKeyword_2_1_0_1() { return cNewValueFalseKeyword_2_1_0_1; }
	}
	public class RickrollElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rickroll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRickrollAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRickRollKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Rickroll:
		//	{Rickroll} 'RickRoll';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rickroll} 'RickRoll'
		public Group getGroup() { return cGroup; }
		
		//{Rickroll}
		public Action getRickrollAction_0() { return cRickrollAction_0; }
		
		//'RickRoll'
		public Keyword getRickRollKeyword_1() { return cRickRollKeyword_1; }
	}
	public class DoWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DoWait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMillisecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMillisecINTTerminalRuleCall_2_0 = (RuleCall)cMillisecAssignment_2.eContents().get(0);
		private final Keyword cMillisecondsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DoWait:
		//	'Wait' 'for' millisec=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'Wait' 'for' millisec=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'Wait'
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//millisec=INT
		public Assignment getMillisecAssignment_2() { return cMillisecAssignment_2; }
		
		//INT
		public RuleCall getMillisecINTTerminalRuleCall_2_0() { return cMillisecINTTerminalRuleCall_2_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_3() { return cMillisecondsKeyword_3; }
	}
	public class IsInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IsIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjObjectParserRuleCall_0_0_0 = (RuleCall)cObjAssignment_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBodyBodyKeyword_0_1_0 = (Keyword)cBodyAssignment_0_1.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		////CONDITION
		//IsIn:
		//	(obj=Object | body="body") 'contains' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//(obj=Object | body="body") 'contains' text=STRING
		public Group getGroup() { return cGroup; }
		
		//(obj=Object | body="body")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//obj=Object
		public Assignment getObjAssignment_0_0() { return cObjAssignment_0_0; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_0_0_0() { return cObjObjectParserRuleCall_0_0_0; }
		
		//body="body"
		public Assignment getBodyAssignment_0_1() { return cBodyAssignment_0_1; }
		
		//"body"
		public Keyword getBodyBodyKeyword_0_1_0() { return cBodyBodyKeyword_0_1_0; }
		
		//'contains'
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		
		//Not:
		//	'Not' cond=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'Not' cond=Condition
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//cond=Condition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_1_0() { return cCondConditionParserRuleCall_1_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionThenActionParserRuleCall_6_0 = (RuleCall)cActionThenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cActionElseAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cActionElseActionParserRuleCall_8_3_0 = (RuleCall)cActionElseAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		////STRUCTURES
		//If:
		//	'If' ':' cond=Condition
		//	'Then' ':' '{' actionThen+=Action* '}' ('Else' ':' '{' actionElse+=Action* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'If' ':' cond=Condition 'Then' ':' '{' actionThen+=Action* '}' ('Else' ':' '{' actionElse+=Action* '}')?
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//cond=Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
		
		//'Then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//actionThen+=Action*
		public Assignment getActionThenAssignment_6() { return cActionThenAssignment_6; }
		
		//Action
		public RuleCall getActionThenActionParserRuleCall_6_0() { return cActionThenActionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('Else' ':' '{' actionElse+=Action* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2() { return cLeftCurlyBracketKeyword_8_2; }
		
		//actionElse+=Action*
		public Assignment getActionElseAssignment_8_3() { return cActionElseAssignment_8_3; }
		
		//Action
		public RuleCall getActionElseActionParserRuleCall_8_3_0() { return cActionElseActionParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondConditionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cIntervalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMillisecondsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMillisecondsINTTerminalRuleCall_7_0 = (RuleCall)cMillisecondsAssignment_7.eContents().get(0);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cActionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cActionsActionParserRuleCall_11_0 = (RuleCall)cActionsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Loop:
		//	'Loop' ':'
		//	'Condition' ':' cond=Condition
		//	'Interval' ':' milliseconds=INT
		//	'Do' ':' '{' actions+=Action* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop' ':' 'Condition' ':' cond=Condition 'Interval' ':' milliseconds=INT 'Do' ':' '{' actions+=Action* '}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//cond=Condition
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_4_0() { return cCondConditionParserRuleCall_4_0; }
		
		//'Interval'
		public Keyword getIntervalKeyword_5() { return cIntervalKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_7() { return cMillisecondsAssignment_7; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_7_0() { return cMillisecondsINTTerminalRuleCall_7_0; }
		
		//'Do'
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_11() { return cActionsAssignment_11; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_11_0() { return cActionsActionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class DoAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DoAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollCollectionParserRuleCall_3_0 = (RuleCall)cCollAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTodoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cTodoAlternatives_7_0 = (Alternatives)cTodoAssignment_7.eContents().get(0);
		private final RuleCall cTodoActionParserRuleCall_7_0_0 = (RuleCall)cTodoAlternatives_7_0.eContents().get(0);
		private final RuleCall cTodoStructureParserRuleCall_7_0_1 = (RuleCall)cTodoAlternatives_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DoAll:
		//	'For' 'all' 'in' coll=Collection 'do' ':' '{' todo+=(Action | Structure)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'For' 'all' 'in' coll=Collection 'do' ':' '{' todo+=(Action | Structure)* '}'
		public Group getGroup() { return cGroup; }
		
		//'For'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'all'
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//coll=Collection
		public Assignment getCollAssignment_3() { return cCollAssignment_3; }
		
		//Collection
		public RuleCall getCollCollectionParserRuleCall_3_0() { return cCollCollectionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//todo+=(Action | Structure)*
		public Assignment getTodoAssignment_7() { return cTodoAssignment_7; }
		
		//(Action | Structure)
		public Alternatives getTodoAlternatives_7_0() { return cTodoAlternatives_7_0; }
		
		//Action
		public RuleCall getTodoActionParserRuleCall_7_0_0() { return cTodoActionParserRuleCall_7_0_0; }
		
		//Structure
		public RuleCall getTodoStructureParserRuleCall_7_0_1() { return cTodoStructureParserRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExecuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Execute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExecuteKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSubProcedureNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubProcedureNameIDTerminalRuleCall_0_1_0 = (RuleCall)cSubProcedureNameAssignment_0_1.eContents().get(0);
		private final Assignment cSubprocedureAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubprocedureSubProcedureParserRuleCall_1_0 = (RuleCall)cSubprocedureAssignment_1.eContents().get(0);
		
		//Execute:
		//	'Execute' subProcedureName=ID | subprocedure=SubProcedure;
		@Override public ParserRule getRule() { return rule; }
		
		//'Execute' subProcedureName=ID | subprocedure=SubProcedure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Execute' subProcedureName=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'Execute'
		public Keyword getExecuteKeyword_0_0() { return cExecuteKeyword_0_0; }
		
		//subProcedureName=ID
		public Assignment getSubProcedureNameAssignment_0_1() { return cSubProcedureNameAssignment_0_1; }
		
		//ID
		public RuleCall getSubProcedureNameIDTerminalRuleCall_0_1_0() { return cSubProcedureNameIDTerminalRuleCall_0_1_0; }
		
		//subprocedure=SubProcedure
		public Assignment getSubprocedureAssignment_1() { return cSubprocedureAssignment_1; }
		
		//SubProcedure
		public RuleCall getSubprocedureSubProcedureParserRuleCall_1_0() { return cSubprocedureSubProcedureParserRuleCall_1_0; }
	}
	
	
	private final MainElements pMain;
	private final ActionElements pAction;
	private final StructureElements pStructure;
	private final ConditionElements pCondition;
	private final ObjectElements pObject;
	private final HTMLTYPEElements pHTMLTYPE;
	private final CollectionElements pCollection;
	private final SubProcedureElements pSubProcedure;
	private final RefreshElements pRefresh;
	private final NavigateElements pNavigate;
	private final StoreElements pStore;
	private final ReDefineElements pReDefine;
	private final DeleteElements pDelete;
	private final ActionSelectElements pActionSelect;
	private final ClickElements pClick;
	private final FillElements pFill;
	private final CheckBoxElements pCheckBox;
	private final RickrollElements pRickroll;
	private final DoWaitElements pDoWait;
	private final IsInElements pIsIn;
	private final NotElements pNot;
	private final IfElements pIf;
	private final LoopElements pLoop;
	private final DoAllElements pDoAll;
	private final ExecuteElements pExecute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pAction = new ActionElements();
		this.pStructure = new StructureElements();
		this.pCondition = new ConditionElements();
		this.pObject = new ObjectElements();
		this.pHTMLTYPE = new HTMLTYPEElements();
		this.pCollection = new CollectionElements();
		this.pSubProcedure = new SubProcedureElements();
		this.pRefresh = new RefreshElements();
		this.pNavigate = new NavigateElements();
		this.pStore = new StoreElements();
		this.pReDefine = new ReDefineElements();
		this.pDelete = new DeleteElements();
		this.pActionSelect = new ActionSelectElements();
		this.pClick = new ClickElements();
		this.pFill = new FillElements();
		this.pCheckBox = new CheckBoxElements();
		this.pRickroll = new RickrollElements();
		this.pDoWait = new DoWaitElements();
		this.pIsIn = new IsInElements();
		this.pNot = new NotElements();
		this.pIf = new IfElements();
		this.pLoop = new LoopElements();
		this.pDoAll = new DoAllElements();
		this.pExecute = new ExecuteElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////GROUP TYPES
	//Main:
	//	'File' fileName=STRING 'with' 'browser' browserName=STRING ':'
	//	orders+=(Action | Structure)*;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Action:
	//	Navigate | Click | Fill | CheckBox | Refresh | ActionSelect | Store | ReDefine | Delete | Rickroll | DoWait;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Structure:
	//	If | Loop | DoAll | Execute;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	//Condition:
	//	IsIn | Not;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	////OBJECTS
	//Object:
	//	objName=ID | SubProcedure | htmltype=HTMLTYPE objectDef=STRING;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	////URL should be added, but it would clash with guess
	////Collection should be added
	//HTMLTYPE:
	//	type=('guess' | 'title' | 'class' | 'id' | 'name' | 'CSS Selector' | 'XPath');
	public HTMLTYPEElements getHTMLTYPEAccess() {
		return pHTMLTYPE;
	}
	
	public ParserRule getHTMLTYPERule() {
		return getHTMLTYPEAccess().getRule();
	}
	
	//Collection:
	//	'Collection' ('{' obj+=Object* '}' | 'of' 'all' htmltype=HTMLTYPE objectRule=STRING);
	public CollectionElements getCollectionAccess() {
		return pCollection;
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}
	
	//SubProcedure:
	//	'Subprocedure' '{' actions+=(Action | Structure)* '}';
	public SubProcedureElements getSubProcedureAccess() {
		return pSubProcedure;
	}
	
	public ParserRule getSubProcedureRule() {
		return getSubProcedureAccess().getRule();
	}
	
	////ACTIONS
	//Refresh:
	//	{Refresh} 'Refresh';
	public RefreshElements getRefreshAccess() {
		return pRefresh;
	}
	
	public ParserRule getRefreshRule() {
		return getRefreshAccess().getRule();
	}
	
	//Navigate:
	//	'Navigate' url=STRING;
	public NavigateElements getNavigateAccess() {
		return pNavigate;
	}
	
	public ParserRule getNavigateRule() {
		return getNavigateAccess().getRule();
	}
	
	////object should be added as url should be objects
	//Store:
	//	'var' objName=ID '=' obj=Object;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//ReDefine:
	//	'Redefine' objName=ID 'as' obj=Object;
	public ReDefineElements getReDefineAccess() {
		return pReDefine;
	}
	
	public ParserRule getReDefineRule() {
		return getReDefineAccess().getRule();
	}
	
	//Delete:
	//	'Delete' objName=ID;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//ActionSelect:
	//	'Select' option=STRING 'from' xpath=STRING;
	public ActionSelectElements getActionSelectAccess() {
		return pActionSelect;
	}
	
	public ParserRule getActionSelectRule() {
		return getActionSelectAccess().getRule();
	}
	
	//Click:
	//	'Click' object=Object;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Fill:
	//	'Fill' nametag=STRING 'with' content=STRING;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//CheckBox:
	//	'CheckBox' nametag=STRING ('to' newValue=('true' | 'false'))?;
	public CheckBoxElements getCheckBoxAccess() {
		return pCheckBox;
	}
	
	public ParserRule getCheckBoxRule() {
		return getCheckBoxAccess().getRule();
	}
	
	//Rickroll:
	//	{Rickroll} 'RickRoll';
	public RickrollElements getRickrollAccess() {
		return pRickroll;
	}
	
	public ParserRule getRickrollRule() {
		return getRickrollAccess().getRule();
	}
	
	//DoWait:
	//	'Wait' 'for' millisec=INT 'milliseconds';
	public DoWaitElements getDoWaitAccess() {
		return pDoWait;
	}
	
	public ParserRule getDoWaitRule() {
		return getDoWaitAccess().getRule();
	}
	
	////CONDITION
	//IsIn:
	//	(obj=Object | body="body") 'contains' text=STRING;
	public IsInElements getIsInAccess() {
		return pIsIn;
	}
	
	public ParserRule getIsInRule() {
		return getIsInAccess().getRule();
	}
	
	//Not:
	//	'Not' cond=Condition;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	////STRUCTURES
	//If:
	//	'If' ':' cond=Condition
	//	'Then' ':' '{' actionThen+=Action* '}' ('Else' ':' '{' actionElse+=Action* '}')?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Loop:
	//	'Loop' ':'
	//	'Condition' ':' cond=Condition
	//	'Interval' ':' milliseconds=INT
	//	'Do' ':' '{' actions+=Action* '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//DoAll:
	//	'For' 'all' 'in' coll=Collection 'do' ':' '{' todo+=(Action | Structure)* '}';
	public DoAllElements getDoAllAccess() {
		return pDoAll;
	}
	
	public ParserRule getDoAllRule() {
		return getDoAllAccess().getRule();
	}
	
	//Execute:
	//	'Execute' subProcedureName=ID | subprocedure=SubProcedure;
	public ExecuteElements getExecuteAccess() {
		return pExecute;
	}
	
	public ParserRule getExecuteRule() {
		return getExecuteAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
