/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBrowserKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBrowserNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBrowserNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cBrowserNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOrdersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cOrdersAlternatives_6_0 = (Alternatives)cOrdersAssignment_6.eContents().get(0);
		private final RuleCall cOrdersActionParserRuleCall_6_0_0 = (RuleCall)cOrdersAlternatives_6_0.eContents().get(0);
		private final RuleCall cOrdersStructureParserRuleCall_6_0_1 = (RuleCall)cOrdersAlternatives_6_0.eContents().get(1);
		
		////GROUP TYPES
		//Main:
		//	'File' fileName=STRING 'with' 'browser' browserName=STRING ':'
		//	orders+=(Action | Structure)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'File' fileName=STRING 'with' 'browser' browserName=STRING ':' orders+=(Action | Structure)*
		public Group getGroup() { return cGroup; }
		
		//'File'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_1_0() { return cFileNameSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'browser'
		public Keyword getBrowserKeyword_3() { return cBrowserKeyword_3; }
		
		//browserName=STRING
		public Assignment getBrowserNameAssignment_4() { return cBrowserNameAssignment_4; }
		
		//STRING
		public RuleCall getBrowserNameSTRINGTerminalRuleCall_4_0() { return cBrowserNameSTRINGTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//orders+=(Action | Structure)*
		public Assignment getOrdersAssignment_6() { return cOrdersAssignment_6; }
		
		//(Action | Structure)
		public Alternatives getOrdersAlternatives_6_0() { return cOrdersAlternatives_6_0; }
		
		//Action
		public RuleCall getOrdersActionParserRuleCall_6_0_0() { return cOrdersActionParserRuleCall_6_0_0; }
		
		//Structure
		public RuleCall getOrdersStructureParserRuleCall_6_0_1() { return cOrdersStructureParserRuleCall_6_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClickParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFillParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetCheckBoxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefreshParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAlertParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStoreParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Action:
		//	Navigate | Click | Fill | SetCheckBox | Refresh | Alert | Store;
		@Override public ParserRule getRule() { return rule; }
		
		//Navigate | Click | Fill | SetCheckBox | Refresh | Alert | Store
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Navigate
		public RuleCall getNavigateParserRuleCall_0() { return cNavigateParserRuleCall_0; }
		
		//Click
		public RuleCall getClickParserRuleCall_1() { return cClickParserRuleCall_1; }
		
		//Fill
		public RuleCall getFillParserRuleCall_2() { return cFillParserRuleCall_2; }
		
		//SetCheckBox
		public RuleCall getSetCheckBoxParserRuleCall_3() { return cSetCheckBoxParserRuleCall_3; }
		
		//Refresh
		public RuleCall getRefreshParserRuleCall_4() { return cRefreshParserRuleCall_4; }
		
		//Alert
		public RuleCall getAlertParserRuleCall_5() { return cAlertParserRuleCall_5; }
		
		//Store
		public RuleCall getStoreParserRuleCall_6() { return cStoreParserRuleCall_6; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Structure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoAllParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Structure:
		//	If | Loop | DoAll;
		@Override public ParserRule getRule() { return rule; }
		
		//If | Loop | DoAll
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//DoAll
		public RuleCall getDoAllParserRuleCall_2() { return cDoAllParserRuleCall_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	IsIn | Not;
		@Override public ParserRule getRule() { return rule; }
		
		//IsIn | Not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsIn
		public RuleCall getIsInParserRuleCall_0() { return cIsInParserRuleCall_0; }
		
		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHTMLTYPEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		////OBJECTS
		//Object:
		//	HTMLTYPE typeName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//HTMLTYPE typeName=STRING
		public Group getGroup() { return cGroup; }
		
		//HTMLTYPE
		public RuleCall getHTMLTYPEParserRuleCall_0() { return cHTMLTYPEParserRuleCall_0; }
		
		//typeName=STRING
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//STRING
		public RuleCall getTypeNameSTRINGTerminalRuleCall_1_0() { return cTypeNameSTRINGTerminalRuleCall_1_0; }
	}
	public class HTMLTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HTMLTYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//HTMLTYPE:
		//	'class' | 'id' | 'name';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' | 'id' | 'name'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'id'
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
	}
	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Collection");
		private final Assignment cObjAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjObjectParserRuleCall_0 = (RuleCall)cObjAssignment.eContents().get(0);
		
		//Collection:
		//	obj+=Object*;
		@Override public ParserRule getRule() { return rule; }
		
		//obj+=Object*
		public Assignment getObjAssignment() { return cObjAssignment; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_0() { return cObjObjectParserRuleCall_0; }
	}
	public class AlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Alert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		////ACTIONS
		//Alert:
		//	'Alert' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Alert' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'Alert'
		public Keyword getAlertKeyword_0() { return cAlertKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class RefreshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Refresh");
		private final Keyword cRefreshKeyword = (Keyword)rule.eContents().get(1);
		
		//Refresh:
		//	'Refresh';
		@Override public ParserRule getRule() { return rule; }
		
		//'Refresh'
		public Keyword getRefreshKeyword() { return cRefreshKeyword; }
	}
	public class NavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Navigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//Navigate:
		//	'Navigate' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Navigate' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'Navigate'
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjObjectParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cObjNameAssignment_3.eContents().get(0);
		
		//Store:
		//	'Store' obj=Object 'as' objName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Store' obj=Object 'as' objName=STRING
		public Group getGroup() { return cGroup; }
		
		//'Store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//obj=Object
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_1_0() { return cObjObjectParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//objName=STRING
		public Assignment getObjNameAssignment_3() { return cObjNameAssignment_3; }
		
		//STRING
		public RuleCall getObjNameSTRINGTerminalRuleCall_3_0() { return cObjNameSTRINGTerminalRuleCall_3_0; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInnerhtmlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerhtmlSTRINGTerminalRuleCall_1_0 = (RuleCall)cInnerhtmlAssignment_1.eContents().get(0);
		
		//Click:
		//	'Click' innerhtml=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Click' innerhtml=STRING
		public Group getGroup() { return cGroup; }
		
		//'Click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//innerhtml=STRING
		public Assignment getInnerhtmlAssignment_1() { return cInnerhtmlAssignment_1; }
		
		//STRING
		public RuleCall getInnerhtmlSTRINGTerminalRuleCall_1_0() { return cInnerhtmlSTRINGTerminalRuleCall_1_0; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNametagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNametagSTRINGTerminalRuleCall_1_0 = (RuleCall)cNametagAssignment_1.eContents().get(0);
		
		//Fill:
		//	'Fill' nametag=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fill' nametag=STRING
		public Group getGroup() { return cGroup; }
		
		//'Fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//nametag=STRING
		public Assignment getNametagAssignment_1() { return cNametagAssignment_1; }
		
		//STRING
		public RuleCall getNametagSTRINGTerminalRuleCall_1_0() { return cNametagSTRINGTerminalRuleCall_1_0; }
	}
	public class SetCheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SetCheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetCheckBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNametagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNametagSTRINGTerminalRuleCall_1_0 = (RuleCall)cNametagAssignment_1.eContents().get(0);
		
		//SetCheckBox:
		//	'SetCheckBox' nametag=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'SetCheckBox' nametag=STRING
		public Group getGroup() { return cGroup; }
		
		//'SetCheckBox'
		public Keyword getSetCheckBoxKeyword_0() { return cSetCheckBoxKeyword_0; }
		
		//nametag=STRING
		public Assignment getNametagAssignment_1() { return cNametagAssignment_1; }
		
		//STRING
		public RuleCall getNametagSTRINGTerminalRuleCall_1_0() { return cNametagSTRINGTerminalRuleCall_1_0; }
	}
	public class IsInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IsIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTitleAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cTitleAssignment_3_0.eContents().get(0);
		private final Assignment cObjAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cObjObjectParserRuleCall_3_1_0 = (RuleCall)cObjAssignment_3_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////CONDITION
		//IsIn:
		//	'Is' text=STRING 'in' (title=STRING | obj=Object) '?';
		@Override public ParserRule getRule() { return rule; }
		
		//'Is' text=STRING 'in' (title=STRING | obj=Object) '?'
		public Group getGroup() { return cGroup; }
		
		//'Is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//(title=STRING | obj=Object)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//title=STRING
		public Assignment getTitleAssignment_3_0() { return cTitleAssignment_3_0; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_0_0() { return cTitleSTRINGTerminalRuleCall_3_0_0; }
		
		//obj=Object
		public Assignment getObjAssignment_3_1() { return cObjAssignment_3_1; }
		
		//Object
		public RuleCall getObjObjectParserRuleCall_3_1_0() { return cObjObjectParserRuleCall_3_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_4() { return cQuestionMarkKeyword_4; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		
		//Not:
		//	'Not' cond=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'Not' cond=Condition
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//cond=Condition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_1_0() { return cCondConditionParserRuleCall_1_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionThenActionParserRuleCall_6_0 = (RuleCall)cActionThenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cActionElseAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cActionElseActionParserRuleCall_8_3_0 = (RuleCall)cActionElseAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		////STRUCTURES
		//If:
		//	'If' ':' cond=Condition
		//	'Then' ':' '{' actionThen=Action* '}' ('Else' ':' '{' actionElse=Action* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'If' ':' cond=Condition 'Then' ':' '{' actionThen=Action* '}' ('Else' ':' '{' actionElse=Action* '}')?
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//cond=Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
		
		//'Then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//actionThen=Action*
		public Assignment getActionThenAssignment_6() { return cActionThenAssignment_6; }
		
		//Action
		public RuleCall getActionThenActionParserRuleCall_6_0() { return cActionThenActionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('Else' ':' '{' actionElse=Action* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2() { return cLeftCurlyBracketKeyword_8_2; }
		
		//actionElse=Action*
		public Assignment getActionElseAssignment_8_3() { return cActionElseAssignment_8_3; }
		
		//Action
		public RuleCall getActionElseActionParserRuleCall_8_3_0() { return cActionElseActionParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondConditionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cIntervalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMillisecondsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMillisecondsINTTerminalRuleCall_7_0 = (RuleCall)cMillisecondsAssignment_7.eContents().get(0);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cActionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cActionsActionParserRuleCall_11_0 = (RuleCall)cActionsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Loop:
		//	'Loop' ':'
		//	'Condition' ':' cond=Condition
		//	'Interval' ':' milliseconds=INT
		//	'Do' ':' '{' actions=Action* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop' ':' 'Condition' ':' cond=Condition 'Interval' ':' milliseconds=INT 'Do' ':' '{' actions=Action* '}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//cond=Condition
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_4_0() { return cCondConditionParserRuleCall_4_0; }
		
		//'Interval'
		public Keyword getIntervalKeyword_5() { return cIntervalKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//milliseconds=INT
		public Assignment getMillisecondsAssignment_7() { return cMillisecondsAssignment_7; }
		
		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_7_0() { return cMillisecondsINTTerminalRuleCall_7_0; }
		
		//'Do'
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//actions=Action*
		public Assignment getActionsAssignment_11() { return cActionsAssignment_11; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_11_0() { return cActionsActionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class DoAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DoAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollCollectionParserRuleCall_3_0 = (RuleCall)cCollAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTodoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cTodoAlternatives_6_0 = (Alternatives)cTodoAssignment_6.eContents().get(0);
		private final RuleCall cTodoActionParserRuleCall_6_0_0 = (RuleCall)cTodoAlternatives_6_0.eContents().get(0);
		private final RuleCall cTodoStructureParserRuleCall_6_0_1 = (RuleCall)cTodoAlternatives_6_0.eContents().get(1);
		
		//DoAll:
		//	'For' 'all' 'in' coll=Collection 'do' ':' todo=(Action | Structure);
		@Override public ParserRule getRule() { return rule; }
		
		//'For' 'all' 'in' coll=Collection 'do' ':' todo=(Action | Structure)
		public Group getGroup() { return cGroup; }
		
		//'For'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'all'
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//coll=Collection
		public Assignment getCollAssignment_3() { return cCollAssignment_3; }
		
		//Collection
		public RuleCall getCollCollectionParserRuleCall_3_0() { return cCollCollectionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//todo=(Action | Structure)
		public Assignment getTodoAssignment_6() { return cTodoAssignment_6; }
		
		//(Action | Structure)
		public Alternatives getTodoAlternatives_6_0() { return cTodoAlternatives_6_0; }
		
		//Action
		public RuleCall getTodoActionParserRuleCall_6_0_0() { return cTodoActionParserRuleCall_6_0_0; }
		
		//Structure
		public RuleCall getTodoStructureParserRuleCall_6_0_1() { return cTodoStructureParserRuleCall_6_0_1; }
	}
	
	
	private final MainElements pMain;
	private final ActionElements pAction;
	private final StructureElements pStructure;
	private final ConditionElements pCondition;
	private final ObjectElements pObject;
	private final HTMLTYPEElements pHTMLTYPE;
	private final CollectionElements pCollection;
	private final AlertElements pAlert;
	private final RefreshElements pRefresh;
	private final NavigateElements pNavigate;
	private final StoreElements pStore;
	private final ClickElements pClick;
	private final FillElements pFill;
	private final SetCheckBoxElements pSetCheckBox;
	private final IsInElements pIsIn;
	private final NotElements pNot;
	private final IfElements pIf;
	private final LoopElements pLoop;
	private final DoAllElements pDoAll;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pAction = new ActionElements();
		this.pStructure = new StructureElements();
		this.pCondition = new ConditionElements();
		this.pObject = new ObjectElements();
		this.pHTMLTYPE = new HTMLTYPEElements();
		this.pCollection = new CollectionElements();
		this.pAlert = new AlertElements();
		this.pRefresh = new RefreshElements();
		this.pNavigate = new NavigateElements();
		this.pStore = new StoreElements();
		this.pClick = new ClickElements();
		this.pFill = new FillElements();
		this.pSetCheckBox = new SetCheckBoxElements();
		this.pIsIn = new IsInElements();
		this.pNot = new NotElements();
		this.pIf = new IfElements();
		this.pLoop = new LoopElements();
		this.pDoAll = new DoAllElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////GROUP TYPES
	//Main:
	//	'File' fileName=STRING 'with' 'browser' browserName=STRING ':'
	//	orders+=(Action | Structure)*;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Action:
	//	Navigate | Click | Fill | SetCheckBox | Refresh | Alert | Store;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Structure:
	//	If | Loop | DoAll;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	//Condition:
	//	IsIn | Not;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	////OBJECTS
	//Object:
	//	HTMLTYPE typeName=STRING;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//HTMLTYPE:
	//	'class' | 'id' | 'name';
	public HTMLTYPEElements getHTMLTYPEAccess() {
		return pHTMLTYPE;
	}
	
	public ParserRule getHTMLTYPERule() {
		return getHTMLTYPEAccess().getRule();
	}
	
	//Collection:
	//	obj+=Object*;
	public CollectionElements getCollectionAccess() {
		return pCollection;
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}
	
	////ACTIONS
	//Alert:
	//	'Alert' text=STRING;
	public AlertElements getAlertAccess() {
		return pAlert;
	}
	
	public ParserRule getAlertRule() {
		return getAlertAccess().getRule();
	}
	
	//Refresh:
	//	'Refresh';
	public RefreshElements getRefreshAccess() {
		return pRefresh;
	}
	
	public ParserRule getRefreshRule() {
		return getRefreshAccess().getRule();
	}
	
	//Navigate:
	//	'Navigate' url=STRING;
	public NavigateElements getNavigateAccess() {
		return pNavigate;
	}
	
	public ParserRule getNavigateRule() {
		return getNavigateAccess().getRule();
	}
	
	//Store:
	//	'Store' obj=Object 'as' objName=STRING;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Click:
	//	'Click' innerhtml=STRING;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Fill:
	//	'Fill' nametag=STRING;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//SetCheckBox:
	//	'SetCheckBox' nametag=STRING;
	public SetCheckBoxElements getSetCheckBoxAccess() {
		return pSetCheckBox;
	}
	
	public ParserRule getSetCheckBoxRule() {
		return getSetCheckBoxAccess().getRule();
	}
	
	////CONDITION
	//IsIn:
	//	'Is' text=STRING 'in' (title=STRING | obj=Object) '?';
	public IsInElements getIsInAccess() {
		return pIsIn;
	}
	
	public ParserRule getIsInRule() {
		return getIsInAccess().getRule();
	}
	
	//Not:
	//	'Not' cond=Condition;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	////STRUCTURES
	//If:
	//	'If' ':' cond=Condition
	//	'Then' ':' '{' actionThen=Action* '}' ('Else' ':' '{' actionElse=Action* '}')?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Loop:
	//	'Loop' ':'
	//	'Condition' ':' cond=Condition
	//	'Interval' ':' milliseconds=INT
	//	'Do' ':' '{' actions=Action* '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//DoAll:
	//	'For' 'all' 'in' coll=Collection 'do' ':' todo=(Action | Structure);
	public DoAllElements getDoAllAccess() {
		return pDoAll;
	}
	
	public ParserRule getDoAllRule() {
		return getDoAllAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
