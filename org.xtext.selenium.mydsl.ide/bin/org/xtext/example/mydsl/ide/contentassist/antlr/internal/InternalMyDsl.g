/*
 * generated by Xtext 2.9.1
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructure
entryRuleStructure
:
{ before(grammarAccess.getStructureRule()); }
	 ruleStructure
{ after(grammarAccess.getStructureRule()); } 
	 EOF 
;

// Rule Structure
ruleStructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructureAccess().getAlternatives()); }
		(rule__Structure__Alternatives)
		{ after(grammarAccess.getStructureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getAlternatives()); }
		(rule__Object__Alternatives)
		{ after(grammarAccess.getObjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHTMLTYPE
entryRuleHTMLTYPE
:
{ before(grammarAccess.getHTMLTYPERule()); }
	 ruleHTMLTYPE
{ after(grammarAccess.getHTMLTYPERule()); } 
	 EOF 
;

// Rule HTMLTYPE
ruleHTMLTYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeAssignment()); }
		(rule__HTMLTYPE__TypeAssignment)
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollection
entryRuleCollection
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccess().getGroup()); }
		(rule__Collection__Group__0)
		{ after(grammarAccess.getCollectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubProcedure
entryRuleSubProcedure
:
{ before(grammarAccess.getSubProcedureRule()); }
	 ruleSubProcedure
{ after(grammarAccess.getSubProcedureRule()); } 
	 EOF 
;

// Rule SubProcedure
ruleSubProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubProcedureAccess().getGroup()); }
		(rule__SubProcedure__Group__0)
		{ after(grammarAccess.getSubProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefresh
entryRuleRefresh
:
{ before(grammarAccess.getRefreshRule()); }
	 ruleRefresh
{ after(grammarAccess.getRefreshRule()); } 
	 EOF 
;

// Rule Refresh
ruleRefresh 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefreshAccess().getGroup()); }
		(rule__Refresh__Group__0)
		{ after(grammarAccess.getRefreshAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigate
entryRuleNavigate
:
{ before(grammarAccess.getNavigateRule()); }
	 ruleNavigate
{ after(grammarAccess.getNavigateRule()); } 
	 EOF 
;

// Rule Navigate
ruleNavigate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigateAccess().getGroup()); }
		(rule__Navigate__Group__0)
		{ after(grammarAccess.getNavigateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReDefine
entryRuleReDefine
:
{ before(grammarAccess.getReDefineRule()); }
	 ruleReDefine
{ after(grammarAccess.getReDefineRule()); } 
	 EOF 
;

// Rule ReDefine
ruleReDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReDefineAccess().getGroup()); }
		(rule__ReDefine__Group__0)
		{ after(grammarAccess.getReDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelete
entryRuleDelete
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAccess().getGroup()); }
		(rule__Delete__Group__0)
		{ after(grammarAccess.getDeleteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionSelect
entryRuleActionSelect
:
{ before(grammarAccess.getActionSelectRule()); }
	 ruleActionSelect
{ after(grammarAccess.getActionSelectRule()); } 
	 EOF 
;

// Rule ActionSelect
ruleActionSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionSelectAccess().getGroup()); }
		(rule__ActionSelect__Group__0)
		{ after(grammarAccess.getActionSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFill
entryRuleFill
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFillAccess().getGroup()); }
		(rule__Fill__Group__0)
		{ after(grammarAccess.getFillAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheckBox
entryRuleCheckBox
:
{ before(grammarAccess.getCheckBoxRule()); }
	 ruleCheckBox
{ after(grammarAccess.getCheckBoxRule()); } 
	 EOF 
;

// Rule CheckBox
ruleCheckBox 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckBoxAccess().getGroup()); }
		(rule__CheckBox__Group__0)
		{ after(grammarAccess.getCheckBoxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRickroll
entryRuleRickroll
:
{ before(grammarAccess.getRickrollRule()); }
	 ruleRickroll
{ after(grammarAccess.getRickrollRule()); } 
	 EOF 
;

// Rule Rickroll
ruleRickroll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRickrollAccess().getGroup()); }
		(rule__Rickroll__Group__0)
		{ after(grammarAccess.getRickrollAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoWait
entryRuleDoWait
:
{ before(grammarAccess.getDoWaitRule()); }
	 ruleDoWait
{ after(grammarAccess.getDoWaitRule()); } 
	 EOF 
;

// Rule DoWait
ruleDoWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoWaitAccess().getGroup()); }
		(rule__DoWait__Group__0)
		{ after(grammarAccess.getDoWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsIn
entryRuleIsIn
:
{ before(grammarAccess.getIsInRule()); }
	 ruleIsIn
{ after(grammarAccess.getIsInRule()); } 
	 EOF 
;

// Rule IsIn
ruleIsIn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsInAccess().getGroup()); }
		(rule__IsIn__Group__0)
		{ after(grammarAccess.getIsInAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoAll
entryRuleDoAll
:
{ before(grammarAccess.getDoAllRule()); }
	 ruleDoAll
{ after(grammarAccess.getDoAllRule()); } 
	 EOF 
;

// Rule DoAll
ruleDoAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoAllAccess().getGroup()); }
		(rule__DoAll__Group__0)
		{ after(grammarAccess.getDoAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExecute
entryRuleExecute
:
{ before(grammarAccess.getExecuteRule()); }
	 ruleExecute
{ after(grammarAccess.getExecuteRule()); } 
	 EOF 
;

// Rule Execute
ruleExecute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExecuteAccess().getAlternatives()); }
		(rule__Execute__Alternatives)
		{ after(grammarAccess.getExecuteAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__OrdersAlternatives_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getOrdersActionParserRuleCall_6_0_0()); }
		ruleAction
		{ after(grammarAccess.getMainAccess().getOrdersActionParserRuleCall_6_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMainAccess().getOrdersStructureParserRuleCall_6_0_1()); }
		ruleStructure
		{ after(grammarAccess.getMainAccess().getOrdersStructureParserRuleCall_6_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getNavigateParserRuleCall_0()); }
		ruleNavigate
		{ after(grammarAccess.getActionAccess().getNavigateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getClickParserRuleCall_1()); }
		ruleClick
		{ after(grammarAccess.getActionAccess().getClickParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
		ruleFill
		{ after(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getCheckBoxParserRuleCall_3()); }
		ruleCheckBox
		{ after(grammarAccess.getActionAccess().getCheckBoxParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getRefreshParserRuleCall_4()); }
		ruleRefresh
		{ after(grammarAccess.getActionAccess().getRefreshParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSelectParserRuleCall_5()); }
		ruleActionSelect
		{ after(grammarAccess.getActionAccess().getActionSelectParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getStoreParserRuleCall_6()); }
		ruleStore
		{ after(grammarAccess.getActionAccess().getStoreParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getReDefineParserRuleCall_7()); }
		ruleReDefine
		{ after(grammarAccess.getActionAccess().getReDefineParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getDeleteParserRuleCall_8()); }
		ruleDelete
		{ after(grammarAccess.getActionAccess().getDeleteParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getRickrollParserRuleCall_9()); }
		ruleRickroll
		{ after(grammarAccess.getActionAccess().getRickrollParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getDoWaitParserRuleCall_10()); }
		ruleDoWait
		{ after(grammarAccess.getActionAccess().getDoWaitParserRuleCall_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructureAccess().getIfParserRuleCall_0()); }
		ruleIf
		{ after(grammarAccess.getStructureAccess().getIfParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStructureAccess().getLoopParserRuleCall_1()); }
		ruleLoop
		{ after(grammarAccess.getStructureAccess().getLoopParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStructureAccess().getDoAllParserRuleCall_2()); }
		ruleDoAll
		{ after(grammarAccess.getStructureAccess().getDoAllParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStructureAccess().getExecuteParserRuleCall_3()); }
		ruleExecute
		{ after(grammarAccess.getStructureAccess().getExecuteParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getIsInParserRuleCall_0()); }
		ruleIsIn
		{ after(grammarAccess.getConditionAccess().getIsInParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getNotParserRuleCall_1()); }
		ruleNot
		{ after(grammarAccess.getConditionAccess().getNotParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjNameAssignment_0()); }
		(rule__Object__ObjNameAssignment_0)
		{ after(grammarAccess.getObjectAccess().getObjNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getSubProcedureParserRuleCall_1()); }
		ruleSubProcedure
		{ after(grammarAccess.getObjectAccess().getSubProcedureParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getGroup_2()); }
		(rule__Object__Group_2__0)
		{ after(grammarAccess.getObjectAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HTMLTYPE__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeGuessKeyword_0_0()); }
		'guess'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeGuessKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeTitleKeyword_0_1()); }
		'title'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeTitleKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeClassKeyword_0_2()); }
		'class'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeClassKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeIdKeyword_0_3()); }
		'id'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeIdKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeNameKeyword_0_4()); }
		'name'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeNameKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeCSSSelectorKeyword_0_5()); }
		'CSS Selector'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeCSSSelectorKeyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeXPathKeyword_0_6()); }
		'XPath'
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeXPathKeyword_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getGroup_1_0()); }
		(rule__Collection__Group_1_0__0)
		{ after(grammarAccess.getCollectionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionAccess().getGroup_1_1()); }
		(rule__Collection__Group_1_1__0)
		{ after(grammarAccess.getCollectionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__ActionsAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubProcedureAccess().getActionsActionParserRuleCall_2_0_0()); }
		ruleAction
		{ after(grammarAccess.getSubProcedureAccess().getActionsActionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubProcedureAccess().getActionsStructureParserRuleCall_2_0_1()); }
		ruleStructure
		{ after(grammarAccess.getSubProcedureAccess().getActionsStructureParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__NewValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckBoxAccess().getNewValueTrueKeyword_2_1_0_0()); }
		'true'
		{ after(grammarAccess.getCheckBoxAccess().getNewValueTrueKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCheckBoxAccess().getNewValueFalseKeyword_2_1_0_1()); }
		'false'
		{ after(grammarAccess.getCheckBoxAccess().getNewValueFalseKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getObjAssignment_0_0()); }
		(rule__IsIn__ObjAssignment_0_0)
		{ after(grammarAccess.getIsInAccess().getObjAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIsInAccess().getBodyAssignment_0_1()); }
		(rule__IsIn__BodyAssignment_0_1)
		{ after(grammarAccess.getIsInAccess().getBodyAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__TodoAlternatives_7_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getTodoActionParserRuleCall_7_0_0()); }
		ruleAction
		{ after(grammarAccess.getDoAllAccess().getTodoActionParserRuleCall_7_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDoAllAccess().getTodoStructureParserRuleCall_7_0_1()); }
		ruleStructure
		{ after(grammarAccess.getDoAllAccess().getTodoStructureParserRuleCall_7_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecuteAccess().getGroup_0()); }
		(rule__Execute__Group_0__0)
		{ after(grammarAccess.getExecuteAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExecuteAccess().getSubprocedureAssignment_1()); }
		(rule__Execute__SubprocedureAssignment_1)
		{ after(grammarAccess.getExecuteAccess().getSubprocedureAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFileKeyword_0()); }
	'File'
	{ after(grammarAccess.getMainAccess().getFileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFileNameAssignment_1()); }
	(rule__Main__FileNameAssignment_1)
	{ after(grammarAccess.getMainAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__2__Impl
	rule__Main__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getMainAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__3__Impl
	rule__Main__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getBrowserKeyword_3()); }
	'browser'
	{ after(grammarAccess.getMainAccess().getBrowserKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__4__Impl
	rule__Main__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getBrowserNameAssignment_4()); }
	(rule__Main__BrowserNameAssignment_4)
	{ after(grammarAccess.getMainAccess().getBrowserNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__5__Impl
	rule__Main__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getMainAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getOrdersAssignment_6()); }
	(rule__Main__OrdersAssignment_6)*
	{ after(grammarAccess.getMainAccess().getOrdersAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__0__Impl
	rule__Object__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getHtmltypeAssignment_2_0()); }
	(rule__Object__HtmltypeAssignment_2_0)
	{ after(grammarAccess.getObjectAccess().getHtmltypeAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObjectDefAssignment_2_1()); }
	(rule__Object__ObjectDefAssignment_2_1)
	{ after(grammarAccess.getObjectAccess().getObjectDefAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__0__Impl
	rule__Collection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getCollectionKeyword_0()); }
	'Collection'
	{ after(grammarAccess.getCollectionAccess().getCollectionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getAlternatives_1()); }
	(rule__Collection__Alternatives_1)
	{ after(grammarAccess.getCollectionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_0__0__Impl
	rule__Collection__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getLeftCurlyBracketKeyword_1_0_0()); }
	'{'
	{ after(grammarAccess.getCollectionAccess().getLeftCurlyBracketKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_0__1__Impl
	rule__Collection__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getObjAssignment_1_0_1()); }
	(rule__Collection__ObjAssignment_1_0_1)*
	{ after(grammarAccess.getCollectionAccess().getObjAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getRightCurlyBracketKeyword_1_0_2()); }
	'}'
	{ after(grammarAccess.getCollectionAccess().getRightCurlyBracketKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_1__0__Impl
	rule__Collection__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getOfKeyword_1_1_0()); }
	'of'
	{ after(grammarAccess.getCollectionAccess().getOfKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_1__1__Impl
	rule__Collection__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getAllKeyword_1_1_1()); }
	'all'
	{ after(grammarAccess.getCollectionAccess().getAllKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_1__2__Impl
	rule__Collection__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getHtmltypeAssignment_1_1_2()); }
	(rule__Collection__HtmltypeAssignment_1_1_2)
	{ after(grammarAccess.getCollectionAccess().getHtmltypeAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collection__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccess().getObjectRuleAssignment_1_1_3()); }
	(rule__Collection__ObjectRuleAssignment_1_1_3)
	{ after(grammarAccess.getCollectionAccess().getObjectRuleAssignment_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubProcedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubProcedure__Group__0__Impl
	rule__SubProcedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubProcedureAccess().getSubprocedureKeyword_0()); }
	'Subprocedure'
	{ after(grammarAccess.getSubProcedureAccess().getSubprocedureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubProcedure__Group__1__Impl
	rule__SubProcedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubProcedureAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSubProcedureAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubProcedure__Group__2__Impl
	rule__SubProcedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubProcedureAccess().getActionsAssignment_2()); }
	(rule__SubProcedure__ActionsAssignment_2)*
	{ after(grammarAccess.getSubProcedureAccess().getActionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubProcedure__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubProcedureAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSubProcedureAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Refresh__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Refresh__Group__0__Impl
	rule__Refresh__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Refresh__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefreshAccess().getRefreshAction_0()); }
	()
	{ after(grammarAccess.getRefreshAccess().getRefreshAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refresh__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Refresh__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Refresh__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefreshAccess().getRefreshKeyword_1()); }
	'Refresh'
	{ after(grammarAccess.getRefreshAccess().getRefreshKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Navigate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navigate__Group__0__Impl
	rule__Navigate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigateAccess().getNavigateKeyword_0()); }
	'Navigate'
	{ after(grammarAccess.getNavigateAccess().getNavigateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navigate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigateAccess().getUrlAssignment_1()); }
	(rule__Navigate__UrlAssignment_1)
	{ after(grammarAccess.getNavigateAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getStoreAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getObjNameAssignment_1()); }
	(rule__Store__ObjNameAssignment_1)
	{ after(grammarAccess.getStoreAccess().getObjNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__2__Impl
	rule__Store__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getStoreAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getObjAssignment_3()); }
	(rule__Store__ObjAssignment_3)
	{ after(grammarAccess.getStoreAccess().getObjAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReDefine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReDefine__Group__0__Impl
	rule__ReDefine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReDefineAccess().getRedefineKeyword_0()); }
	'Redefine'
	{ after(grammarAccess.getReDefineAccess().getRedefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReDefine__Group__1__Impl
	rule__ReDefine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReDefineAccess().getObjNameAssignment_1()); }
	(rule__ReDefine__ObjNameAssignment_1)
	{ after(grammarAccess.getReDefineAccess().getObjNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReDefine__Group__2__Impl
	rule__ReDefine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReDefineAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getReDefineAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReDefine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReDefineAccess().getObjAssignment_3()); }
	(rule__ReDefine__ObjAssignment_3)
	{ after(grammarAccess.getReDefineAccess().getObjAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__0__Impl
	rule__Delete__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }
	'Delete'
	{ after(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getObjNameAssignment_1()); }
	(rule__Delete__ObjNameAssignment_1)
	{ after(grammarAccess.getDeleteAccess().getObjNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionSelect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSelect__Group__0__Impl
	rule__ActionSelect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSelectAccess().getSelectKeyword_0()); }
	'Select'
	{ after(grammarAccess.getActionSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSelect__Group__1__Impl
	rule__ActionSelect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSelectAccess().getOptionAssignment_1()); }
	(rule__ActionSelect__OptionAssignment_1)
	{ after(grammarAccess.getActionSelectAccess().getOptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSelect__Group__2__Impl
	rule__ActionSelect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSelectAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getActionSelectAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSelect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSelectAccess().getXpathAssignment_3()); }
	(rule__ActionSelect__XpathAssignment_3)
	{ after(grammarAccess.getActionSelectAccess().getXpathAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }
	'Click'
	{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getObjectAssignment_1()); }
	(rule__Click__ObjectAssignment_1)
	{ after(grammarAccess.getClickAccess().getObjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }
	'Fill'
	{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getNametagAssignment_1()); }
	(rule__Fill__NametagAssignment_1)
	{ after(grammarAccess.getFillAccess().getNametagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__2__Impl
	rule__Fill__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getFillAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getContentAssignment_3()); }
	(rule__Fill__ContentAssignment_3)
	{ after(grammarAccess.getFillAccess().getContentAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CheckBox__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckBox__Group__0__Impl
	rule__CheckBox__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckBoxAccess().getCheckBoxKeyword_0()); }
	'CheckBox'
	{ after(grammarAccess.getCheckBoxAccess().getCheckBoxKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckBox__Group__1__Impl
	rule__CheckBox__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckBoxAccess().getNametagAssignment_1()); }
	(rule__CheckBox__NametagAssignment_1)
	{ after(grammarAccess.getCheckBoxAccess().getNametagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckBox__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckBoxAccess().getGroup_2()); }
	(rule__CheckBox__Group_2__0)?
	{ after(grammarAccess.getCheckBoxAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CheckBox__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckBox__Group_2__0__Impl
	rule__CheckBox__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckBoxAccess().getToKeyword_2_0()); }
	'to'
	{ after(grammarAccess.getCheckBoxAccess().getToKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckBox__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckBoxAccess().getNewValueAssignment_2_1()); }
	(rule__CheckBox__NewValueAssignment_2_1)
	{ after(grammarAccess.getCheckBoxAccess().getNewValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rickroll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rickroll__Group__0__Impl
	rule__Rickroll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rickroll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRickrollAccess().getRickrollAction_0()); }
	()
	{ after(grammarAccess.getRickrollAccess().getRickrollAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rickroll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rickroll__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rickroll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRickrollAccess().getRickRollKeyword_1()); }
	'RickRoll'
	{ after(grammarAccess.getRickrollAccess().getRickRollKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoWait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWait__Group__0__Impl
	rule__DoWait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWaitAccess().getWaitKeyword_0()); }
	'Wait'
	{ after(grammarAccess.getDoWaitAccess().getWaitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWait__Group__1__Impl
	rule__DoWait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWaitAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getDoWaitAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWait__Group__2__Impl
	rule__DoWait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWaitAccess().getMillisecAssignment_2()); }
	(rule__DoWait__MillisecAssignment_2)
	{ after(grammarAccess.getDoWaitAccess().getMillisecAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWait__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWaitAccess().getMillisecondsKeyword_3()); }
	'milliseconds'
	{ after(grammarAccess.getDoWaitAccess().getMillisecondsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsIn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__0__Impl
	rule__IsIn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getAlternatives_0()); }
	(rule__IsIn__Alternatives_0)
	{ after(grammarAccess.getIsInAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__1__Impl
	rule__IsIn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getContainsKeyword_1()); }
	'contains'
	{ after(grammarAccess.getIsInAccess().getContainsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getTextAssignment_2()); }
	(rule__IsIn__TextAssignment_2)
	{ after(grammarAccess.getIsInAccess().getTextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_0()); }
	'Not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getCondAssignment_1()); }
	(rule__Not__CondAssignment_1)
	{ after(grammarAccess.getNotAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_2()); }
	(rule__If__CondAssignment_2)
	{ after(grammarAccess.getIfAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_3()); }
	'Then'
	{ after(grammarAccess.getIfAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getActionThenAssignment_6()); }
	(rule__If__ActionThenAssignment_6)*
	{ after(grammarAccess.getIfAccess().getActionThenAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_8()); }
	(rule__If__Group_8__0)?
	{ after(grammarAccess.getIfAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__0__Impl
	rule__If__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_8_0()); }
	'Else'
	{ after(grammarAccess.getIfAccess().getElseKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__1__Impl
	rule__If__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_8_1()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__2__Impl
	rule__If__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_8_2()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__3__Impl
	rule__If__Group_8__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getActionElseAssignment_8_3()); }
	(rule__If__ActionElseAssignment_8_3)*
	{ after(grammarAccess.getIfAccess().getActionElseAssignment_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8_4()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
	'Loop'
	{ after(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getConditionKeyword_2()); }
	'Condition'
	{ after(grammarAccess.getLoopAccess().getConditionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getCondAssignment_4()); }
	(rule__Loop__CondAssignment_4)
	{ after(grammarAccess.getLoopAccess().getCondAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getIntervalKeyword_5()); }
	'Interval'
	{ after(grammarAccess.getLoopAccess().getIntervalKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__6__Impl
	rule__Loop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__7__Impl
	rule__Loop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getMillisecondsAssignment_7()); }
	(rule__Loop__MillisecondsAssignment_7)
	{ after(grammarAccess.getLoopAccess().getMillisecondsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__8__Impl
	rule__Loop__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getDoKeyword_8()); }
	'Do'
	{ after(grammarAccess.getLoopAccess().getDoKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__9__Impl
	rule__Loop__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_9()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__10__Impl
	rule__Loop__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_10()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__11__Impl
	rule__Loop__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getActionsAssignment_11()); }
	(rule__Loop__ActionsAssignment_11)*
	{ after(grammarAccess.getLoopAccess().getActionsAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_12()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoAll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__0__Impl
	rule__DoAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getForKeyword_0()); }
	'For'
	{ after(grammarAccess.getDoAllAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__1__Impl
	rule__DoAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getAllKeyword_1()); }
	'all'
	{ after(grammarAccess.getDoAllAccess().getAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__2__Impl
	rule__DoAll__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getDoAllAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__3__Impl
	rule__DoAll__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getCollAssignment_3()); }
	(rule__DoAll__CollAssignment_3)
	{ after(grammarAccess.getDoAllAccess().getCollAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__4__Impl
	rule__DoAll__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getDoAllAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__5__Impl
	rule__DoAll__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getDoAllAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__6__Impl
	rule__DoAll__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getDoAllAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__7__Impl
	rule__DoAll__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getTodoAssignment_7()); }
	(rule__DoAll__TodoAssignment_7)*
	{ after(grammarAccess.getDoAllAccess().getTodoAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getDoAllAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Execute__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group_0__0__Impl
	rule__Execute__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getExecuteKeyword_0_0()); }
	'Execute'
	{ after(grammarAccess.getExecuteAccess().getExecuteKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Execute__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecuteAccess().getSubProcedureNameAssignment_0_1()); }
	(rule__Execute__SubProcedureNameAssignment_0_1)
	{ after(grammarAccess.getExecuteAccess().getSubProcedureNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMainAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__BrowserNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getBrowserNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getMainAccess().getBrowserNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__OrdersAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getOrdersAlternatives_6_0()); }
		(rule__Main__OrdersAlternatives_6_0)
		{ after(grammarAccess.getMainAccess().getOrdersAlternatives_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectAccess().getObjNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__HtmltypeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getHtmltypeHTMLTYPEParserRuleCall_2_0_0()); }
		ruleHTMLTYPE
		{ after(grammarAccess.getObjectAccess().getHtmltypeHTMLTYPEParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjectDefAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectDefSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjectAccess().getObjectDefSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HTMLTYPE__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getTypeAlternatives_0()); }
		(rule__HTMLTYPE__TypeAlternatives_0)
		{ after(grammarAccess.getHTMLTYPEAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ObjAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getObjObjectParserRuleCall_1_0_1_0()); }
		ruleObject
		{ after(grammarAccess.getCollectionAccess().getObjObjectParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__HtmltypeAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getHtmltypeHTMLTYPEParserRuleCall_1_1_2_0()); }
		ruleHTMLTYPE
		{ after(grammarAccess.getCollectionAccess().getHtmltypeHTMLTYPEParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ObjectRuleAssignment_1_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getObjectRuleSTRINGTerminalRuleCall_1_1_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getCollectionAccess().getObjectRuleSTRINGTerminalRuleCall_1_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubProcedure__ActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubProcedureAccess().getActionsAlternatives_2_0()); }
		(rule__SubProcedure__ActionsAlternatives_2_0)
		{ after(grammarAccess.getSubProcedureAccess().getActionsAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigateAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNavigateAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ObjNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getObjNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStoreAccess().getObjNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ObjAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getObjObjectParserRuleCall_3_0()); }
		ruleObject
		{ after(grammarAccess.getStoreAccess().getObjObjectParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__ObjNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReDefineAccess().getObjNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getReDefineAccess().getObjNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReDefine__ObjAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReDefineAccess().getObjObjectParserRuleCall_3_0()); }
		ruleObject
		{ after(grammarAccess.getReDefineAccess().getObjObjectParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__ObjNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getObjNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDeleteAccess().getObjNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__OptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSelectAccess().getOptionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionSelectAccess().getOptionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSelect__XpathAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSelectAccess().getXpathSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionSelectAccess().getXpathSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__ObjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getObjectObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getClickAccess().getObjectObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__NametagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFillAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__ContentAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getContentSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getFillAccess().getContentSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__NametagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckBoxAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCheckBoxAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckBox__NewValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckBoxAccess().getNewValueAlternatives_2_1_0()); }
		(rule__CheckBox__NewValueAlternatives_2_1_0)
		{ after(grammarAccess.getCheckBoxAccess().getNewValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWait__MillisecAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWaitAccess().getMillisecINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDoWaitAccess().getMillisecINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__ObjAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getObjObjectParserRuleCall_0_0_0()); }
		ruleObject
		{ after(grammarAccess.getIsInAccess().getObjObjectParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__BodyAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getBodyBodyKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getIsInAccess().getBodyBodyKeyword_0_1_0()); }
			'body'
			{ after(grammarAccess.getIsInAccess().getBodyBodyKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getIsInAccess().getBodyBodyKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__TextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getTextSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getIsInAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getCondConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getNotAccess().getCondConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getIfAccess().getCondConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ActionThenAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getActionThenActionParserRuleCall_6_0()); }
		ruleAction
		{ after(grammarAccess.getIfAccess().getActionThenActionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ActionElseAssignment_8_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getActionElseActionParserRuleCall_8_3_0()); }
		ruleAction
		{ after(grammarAccess.getIfAccess().getActionElseActionParserRuleCall_8_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__CondAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getCondConditionParserRuleCall_4_0()); }
		ruleCondition
		{ after(grammarAccess.getLoopAccess().getCondConditionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__MillisecondsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getMillisecondsINTTerminalRuleCall_7_0()); }
		RULE_INT
		{ after(grammarAccess.getLoopAccess().getMillisecondsINTTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ActionsAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getActionsActionParserRuleCall_11_0()); }
		ruleAction
		{ after(grammarAccess.getLoopAccess().getActionsActionParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__CollAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getCollCollectionParserRuleCall_3_0()); }
		ruleCollection
		{ after(grammarAccess.getDoAllAccess().getCollCollectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__TodoAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getTodoAlternatives_7_0()); }
		(rule__DoAll__TodoAlternatives_7_0)
		{ after(grammarAccess.getDoAllAccess().getTodoAlternatives_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__SubProcedureNameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecuteAccess().getSubProcedureNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExecuteAccess().getSubProcedureNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Execute__SubprocedureAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecuteAccess().getSubprocedureSubProcedureParserRuleCall_1_0()); }
		ruleSubProcedure
		{ after(grammarAccess.getExecuteAccess().getSubprocedureSubProcedureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
