/*
 * generated by Xtext 2.9.1
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructure
entryRuleStructure
:
{ before(grammarAccess.getStructureRule()); }
	 ruleStructure
{ after(grammarAccess.getStructureRule()); } 
	 EOF 
;

// Rule Structure
ruleStructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructureAccess().getAlternatives()); }
		(rule__Structure__Alternatives)
		{ after(grammarAccess.getStructureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHTMLTYPE
entryRuleHTMLTYPE
:
{ before(grammarAccess.getHTMLTYPERule()); }
	 ruleHTMLTYPE
{ after(grammarAccess.getHTMLTYPERule()); } 
	 EOF 
;

// Rule HTMLTYPE
ruleHTMLTYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getAlternatives()); }
		(rule__HTMLTYPE__Alternatives)
		{ after(grammarAccess.getHTMLTYPEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollection
entryRuleCollection
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccess().getObjAssignment()); }
		(rule__Collection__ObjAssignment)*
		{ after(grammarAccess.getCollectionAccess().getObjAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlert
entryRuleAlert
:
{ before(grammarAccess.getAlertRule()); }
	 ruleAlert
{ after(grammarAccess.getAlertRule()); } 
	 EOF 
;

// Rule Alert
ruleAlert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlertAccess().getGroup()); }
		(rule__Alert__Group__0)
		{ after(grammarAccess.getAlertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefresh
entryRuleRefresh
:
{ before(grammarAccess.getRefreshRule()); }
	 ruleRefresh
{ after(grammarAccess.getRefreshRule()); } 
	 EOF 
;

// Rule Refresh
ruleRefresh 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefreshAccess().getRefreshKeyword()); }
		'Refresh'
		{ after(grammarAccess.getRefreshAccess().getRefreshKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigate
entryRuleNavigate
:
{ before(grammarAccess.getNavigateRule()); }
	 ruleNavigate
{ after(grammarAccess.getNavigateRule()); } 
	 EOF 
;

// Rule Navigate
ruleNavigate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigateAccess().getGroup()); }
		(rule__Navigate__Group__0)
		{ after(grammarAccess.getNavigateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFill
entryRuleFill
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFillAccess().getGroup()); }
		(rule__Fill__Group__0)
		{ after(grammarAccess.getFillAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetCheckBox
entryRuleSetCheckBox
:
{ before(grammarAccess.getSetCheckBoxRule()); }
	 ruleSetCheckBox
{ after(grammarAccess.getSetCheckBoxRule()); } 
	 EOF 
;

// Rule SetCheckBox
ruleSetCheckBox 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetCheckBoxAccess().getGroup()); }
		(rule__SetCheckBox__Group__0)
		{ after(grammarAccess.getSetCheckBoxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsIn
entryRuleIsIn
:
{ before(grammarAccess.getIsInRule()); }
	 ruleIsIn
{ after(grammarAccess.getIsInRule()); } 
	 EOF 
;

// Rule IsIn
ruleIsIn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsInAccess().getGroup()); }
		(rule__IsIn__Group__0)
		{ after(grammarAccess.getIsInAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoAll
entryRuleDoAll
:
{ before(grammarAccess.getDoAllRule()); }
	 ruleDoAll
{ after(grammarAccess.getDoAllRule()); } 
	 EOF 
;

// Rule DoAll
ruleDoAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoAllAccess().getGroup()); }
		(rule__DoAll__Group__0)
		{ after(grammarAccess.getDoAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__OrdersAlternatives_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getOrdersActionParserRuleCall_6_0_0()); }
		ruleAction
		{ after(grammarAccess.getMainAccess().getOrdersActionParserRuleCall_6_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMainAccess().getOrdersStructureParserRuleCall_6_0_1()); }
		ruleStructure
		{ after(grammarAccess.getMainAccess().getOrdersStructureParserRuleCall_6_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getNavigateParserRuleCall_0()); }
		ruleNavigate
		{ after(grammarAccess.getActionAccess().getNavigateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getClickParserRuleCall_1()); }
		ruleClick
		{ after(grammarAccess.getActionAccess().getClickParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
		ruleFill
		{ after(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getSetCheckBoxParserRuleCall_3()); }
		ruleSetCheckBox
		{ after(grammarAccess.getActionAccess().getSetCheckBoxParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getRefreshParserRuleCall_4()); }
		ruleRefresh
		{ after(grammarAccess.getActionAccess().getRefreshParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getAlertParserRuleCall_5()); }
		ruleAlert
		{ after(grammarAccess.getActionAccess().getAlertParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getStoreParserRuleCall_6()); }
		ruleStore
		{ after(grammarAccess.getActionAccess().getStoreParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructureAccess().getIfParserRuleCall_0()); }
		ruleIf
		{ after(grammarAccess.getStructureAccess().getIfParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStructureAccess().getLoopParserRuleCall_1()); }
		ruleLoop
		{ after(grammarAccess.getStructureAccess().getLoopParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStructureAccess().getDoAllParserRuleCall_2()); }
		ruleDoAll
		{ after(grammarAccess.getStructureAccess().getDoAllParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getIsInParserRuleCall_0()); }
		ruleIsIn
		{ after(grammarAccess.getConditionAccess().getIsInParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getNotParserRuleCall_1()); }
		ruleNot
		{ after(grammarAccess.getConditionAccess().getNotParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HTMLTYPE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getClassKeyword_0()); }
		'class'
		{ after(grammarAccess.getHTMLTYPEAccess().getClassKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getIdKeyword_1()); }
		'id'
		{ after(grammarAccess.getHTMLTYPEAccess().getIdKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getHTMLTYPEAccess().getNameKeyword_2()); }
		'name'
		{ after(grammarAccess.getHTMLTYPEAccess().getNameKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getTitleAssignment_3_0()); }
		(rule__IsIn__TitleAssignment_3_0)
		{ after(grammarAccess.getIsInAccess().getTitleAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getIsInAccess().getObjAssignment_3_1()); }
		(rule__IsIn__ObjAssignment_3_1)
		{ after(grammarAccess.getIsInAccess().getObjAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__TodoAlternatives_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getTodoActionParserRuleCall_6_0_0()); }
		ruleAction
		{ after(grammarAccess.getDoAllAccess().getTodoActionParserRuleCall_6_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDoAllAccess().getTodoStructureParserRuleCall_6_0_1()); }
		ruleStructure
		{ after(grammarAccess.getDoAllAccess().getTodoStructureParserRuleCall_6_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFileKeyword_0()); }
	'File'
	{ after(grammarAccess.getMainAccess().getFileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFileNameAssignment_1()); }
	(rule__Main__FileNameAssignment_1)
	{ after(grammarAccess.getMainAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__2__Impl
	rule__Main__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getMainAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__3__Impl
	rule__Main__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getBrowserKeyword_3()); }
	'browser'
	{ after(grammarAccess.getMainAccess().getBrowserKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__4__Impl
	rule__Main__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getBrowserNameAssignment_4()); }
	(rule__Main__BrowserNameAssignment_4)
	{ after(grammarAccess.getMainAccess().getBrowserNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__5__Impl
	rule__Main__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getMainAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getOrdersAssignment_6()); }
	(rule__Main__OrdersAssignment_6)*
	{ after(grammarAccess.getMainAccess().getOrdersAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getHTMLTYPEParserRuleCall_0()); }
	ruleHTMLTYPE
	{ after(grammarAccess.getObjectAccess().getHTMLTYPEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getTypeNameAssignment_1()); }
	(rule__Object__TypeNameAssignment_1)
	{ after(grammarAccess.getObjectAccess().getTypeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Alert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alert__Group__0__Impl
	rule__Alert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlertAccess().getAlertKeyword_0()); }
	'Alert'
	{ after(grammarAccess.getAlertAccess().getAlertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alert__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlertAccess().getTextAssignment_1()); }
	(rule__Alert__TextAssignment_1)
	{ after(grammarAccess.getAlertAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Navigate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navigate__Group__0__Impl
	rule__Navigate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigateAccess().getNavigateKeyword_0()); }
	'Navigate'
	{ after(grammarAccess.getNavigateAccess().getNavigateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navigate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigateAccess().getUrlAssignment_1()); }
	(rule__Navigate__UrlAssignment_1)
	{ after(grammarAccess.getNavigateAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
	'Store'
	{ after(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getObjAssignment_1()); }
	(rule__Store__ObjAssignment_1)
	{ after(grammarAccess.getStoreAccess().getObjAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__2__Impl
	rule__Store__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getStoreAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getObjNameAssignment_3()); }
	(rule__Store__ObjNameAssignment_3)
	{ after(grammarAccess.getStoreAccess().getObjNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }
	'Click'
	{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getInnerhtmlAssignment_1()); }
	(rule__Click__InnerhtmlAssignment_1)
	{ after(grammarAccess.getClickAccess().getInnerhtmlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }
	'Fill'
	{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getNametagAssignment_1()); }
	(rule__Fill__NametagAssignment_1)
	{ after(grammarAccess.getFillAccess().getNametagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetCheckBox__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCheckBox__Group__0__Impl
	rule__SetCheckBox__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCheckBox__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCheckBoxAccess().getSetCheckBoxKeyword_0()); }
	'SetCheckBox'
	{ after(grammarAccess.getSetCheckBoxAccess().getSetCheckBoxKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCheckBox__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCheckBox__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCheckBox__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCheckBoxAccess().getNametagAssignment_1()); }
	(rule__SetCheckBox__NametagAssignment_1)
	{ after(grammarAccess.getSetCheckBoxAccess().getNametagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsIn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__0__Impl
	rule__IsIn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getIsKeyword_0()); }
	'Is'
	{ after(grammarAccess.getIsInAccess().getIsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__1__Impl
	rule__IsIn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getTextAssignment_1()); }
	(rule__IsIn__TextAssignment_1)
	{ after(grammarAccess.getIsInAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__2__Impl
	rule__IsIn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getIsInAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__3__Impl
	rule__IsIn__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getAlternatives_3()); }
	(rule__IsIn__Alternatives_3)
	{ after(grammarAccess.getIsInAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsIn__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInAccess().getQuestionMarkKeyword_4()); }
	'?'
	{ after(grammarAccess.getIsInAccess().getQuestionMarkKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_0()); }
	'Not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getCondAssignment_1()); }
	(rule__Not__CondAssignment_1)
	{ after(grammarAccess.getNotAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_2()); }
	(rule__If__CondAssignment_2)
	{ after(grammarAccess.getIfAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_3()); }
	'Then'
	{ after(grammarAccess.getIfAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getActionThenAssignment_6()); }
	(rule__If__ActionThenAssignment_6)*
	{ after(grammarAccess.getIfAccess().getActionThenAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_8()); }
	(rule__If__Group_8__0)?
	{ after(grammarAccess.getIfAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__0__Impl
	rule__If__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_8_0()); }
	'Else'
	{ after(grammarAccess.getIfAccess().getElseKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__1__Impl
	rule__If__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getColonKeyword_8_1()); }
	':'
	{ after(grammarAccess.getIfAccess().getColonKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__2__Impl
	rule__If__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_8_2()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__3__Impl
	rule__If__Group_8__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getActionElseAssignment_8_3()); }
	(rule__If__ActionElseAssignment_8_3)*
	{ after(grammarAccess.getIfAccess().getActionElseAssignment_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8_4()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
	'Loop'
	{ after(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getConditionKeyword_2()); }
	'Condition'
	{ after(grammarAccess.getLoopAccess().getConditionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getCondAssignment_4()); }
	(rule__Loop__CondAssignment_4)
	{ after(grammarAccess.getLoopAccess().getCondAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getIntervalKeyword_5()); }
	'Interval'
	{ after(grammarAccess.getLoopAccess().getIntervalKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__6__Impl
	rule__Loop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__7__Impl
	rule__Loop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getMillisecondsAssignment_7()); }
	(rule__Loop__MillisecondsAssignment_7)
	{ after(grammarAccess.getLoopAccess().getMillisecondsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__8__Impl
	rule__Loop__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getDoKeyword_8()); }
	'Do'
	{ after(grammarAccess.getLoopAccess().getDoKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__9__Impl
	rule__Loop__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_9()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__10__Impl
	rule__Loop__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_10()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__11__Impl
	rule__Loop__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getActionsAssignment_11()); }
	(rule__Loop__ActionsAssignment_11)*
	{ after(grammarAccess.getLoopAccess().getActionsAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_12()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoAll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__0__Impl
	rule__DoAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getForKeyword_0()); }
	'For'
	{ after(grammarAccess.getDoAllAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__1__Impl
	rule__DoAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getAllKeyword_1()); }
	'all'
	{ after(grammarAccess.getDoAllAccess().getAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__2__Impl
	rule__DoAll__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getDoAllAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__3__Impl
	rule__DoAll__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getCollAssignment_3()); }
	(rule__DoAll__CollAssignment_3)
	{ after(grammarAccess.getDoAllAccess().getCollAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__4__Impl
	rule__DoAll__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getDoAllAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__5__Impl
	rule__DoAll__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getDoAllAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoAll__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAllAccess().getTodoAssignment_6()); }
	(rule__DoAll__TodoAssignment_6)
	{ after(grammarAccess.getDoAllAccess().getTodoAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMainAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__BrowserNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getBrowserNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getMainAccess().getBrowserNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__OrdersAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getOrdersAlternatives_6_0()); }
		(rule__Main__OrdersAlternatives_6_0)
		{ after(grammarAccess.getMainAccess().getOrdersAlternatives_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__TypeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getTypeNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjectAccess().getTypeNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ObjAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getObjObjectParserRuleCall_0()); }
		ruleObject
		{ after(grammarAccess.getCollectionAccess().getObjObjectParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alert__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlertAccess().getTextSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAlertAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navigate__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigateAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNavigateAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ObjAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getObjObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getStoreAccess().getObjObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ObjNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getObjNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getStoreAccess().getObjNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__InnerhtmlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getInnerhtmlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getClickAccess().getInnerhtmlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__NametagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFillAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCheckBox__NametagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetCheckBoxAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSetCheckBoxAccess().getNametagSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getTextSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIsInAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__TitleAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getTitleSTRINGTerminalRuleCall_3_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getIsInAccess().getTitleSTRINGTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsIn__ObjAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInAccess().getObjObjectParserRuleCall_3_1_0()); }
		ruleObject
		{ after(grammarAccess.getIsInAccess().getObjObjectParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getCondConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getNotAccess().getCondConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getIfAccess().getCondConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ActionThenAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getActionThenActionParserRuleCall_6_0()); }
		ruleAction
		{ after(grammarAccess.getIfAccess().getActionThenActionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ActionElseAssignment_8_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getActionElseActionParserRuleCall_8_3_0()); }
		ruleAction
		{ after(grammarAccess.getIfAccess().getActionElseActionParserRuleCall_8_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__CondAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getCondConditionParserRuleCall_4_0()); }
		ruleCondition
		{ after(grammarAccess.getLoopAccess().getCondConditionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__MillisecondsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getMillisecondsINTTerminalRuleCall_7_0()); }
		RULE_INT
		{ after(grammarAccess.getLoopAccess().getMillisecondsINTTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ActionsAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getActionsActionParserRuleCall_11_0()); }
		ruleAction
		{ after(grammarAccess.getLoopAccess().getActionsActionParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__CollAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getCollCollectionParserRuleCall_3_0()); }
		ruleCollection
		{ after(grammarAccess.getDoAllAccess().getCollCollectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoAll__TodoAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAllAccess().getTodoAlternatives_6_0()); }
		(rule__DoAll__TodoAlternatives_6_0)
		{ after(grammarAccess.getDoAllAccess().getTodoAlternatives_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
